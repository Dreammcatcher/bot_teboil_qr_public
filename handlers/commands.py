import time
from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from config.config_bot import bot, logging
from config.states import UserState
from models.model import session, UserId, Teboil
from io import BytesIO, StringIO

from utils.utils_func import create_qr_after_update

blacklist_name = dict()
count_bad_enter = dict()


async def start(message: types.Message):
    await bot.send_message(message.chat.id, 'üöò –ü—Ä–∏–≤–µ—Ç, –≤–≤–µ–¥–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...', reply_markup=ReplyKeyboardRemove())
    await UserState.enter.set()


async def give_logs(message: types.Message):
    user_name1 = message.from_user
    await bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏...')
    logging.info(f'–í—ã–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user_name1}')
    await bot.send_document(message.chat.id, open('./logs/bot_logs.log', 'rb'))
    await UserState.enter.set()


async def give_blacklist(message: types.Message):
    user_name = message.from_user
    await bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã–≥—Ä—É–∂–∞—é blacklist...')
    logging.info(f'–í—ã–≥—Ä—É–∂–µ–Ω blacklist, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user_name}\n')
    await bot.send_message(message.chat.id, f'{blacklist_name}')
    await UserState.enter.set()


async def clear_blacklist(message: types.Message):
    user_name = message.from_user
    blacklist_name.clear()
    count_bad_enter.clear()
    logging.info(f'Blacklist –æ—á–∏—â–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user_name}\n')
    await bot.send_message(message.chat.id, '‚ö†Ô∏è Blacklist –æ—á–∏—â–µ–Ω')
    await UserState.enter.set()


async def append_user_to_blacklicst(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∏–º—è —é–∑–µ—Ä–∞ –∏–ª–∏ id:')
    await UserState.append_user.set()


async def append_user(message: types.Message):
    if message.text.isdigit():
        blacklist_name.setdefault(int(message.text), None)
    else:
        blacklist_name.setdefault(None, message.text)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n')
    await bot.send_message(message.chat.id, f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist')
    await bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–∏–π blacklist-\n{blacklist_name}')
    await UserState.enter.set()


async def send_message(message: types.Message):
    text_message = message.text[18:]
    await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...')
    all_data = session.query(UserId.user_id, UserId.user_name).all()
    col = 0
    for j in all_data:
        ids = j[0]
        name = j[1]
        try:
            await bot.send_message(ids, text_message)
            col += 1
        except Exception as er:
            logging.info(f'–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {ids} {name}, –æ—à–∏–±–∫–∞ {er}')
            continue
    await bot.send_message(message.chat.id, f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –≤—Å–µ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–æ {col} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    logging.info(f'–ü—Ä–æ–≤–µ–¥–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-{text_message}')
    await UserState.enter.set()


async def delete_status_sell(message: types.Message):
    mes = message.text.split()
    if len(mes) != 2:
        await bot.send_message(message.chat.id, "–ù–µ –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞—Ç—å, –¥–æ–ø–∏—à–∏ —Ö–µ—à-–∫–æ–¥ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
        await UserState.enter.set()
    else:
        code_hash = mes[1]
        if len(code_hash) == 16:
            status = session.query(Teboil.status_sell).filter_by(num_kart=code_hash).first()
        else:
            status = session.query(Teboil.status_sell).filter_by(code=code_hash).first()
        if status is not None:
            if status[0] is not None:
                session.query(Teboil).filter_by(num_kart=code_hash).update({'status_sell': None})
                session.query(Teboil).filter_by(code=code_hash).update({'status_sell': None})
                session.commit()
                await bot.send_message(message.chat.id, f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–¥–∞ - {code_hash} —Å–±—Ä–æ—à–µ–Ω")
            else:
                await bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –∫–æ–¥ –µ—â–µ –Ω–µ –ø—Ä–æ–¥–∞–Ω")
        else:
            await bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
        await UserState.enter.set()


async def readme(message: types.Message):
    await bot.send_message(message.chat.id, '/bot_give_me_logs  - –≤—ã–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–≥–æ–≤ –≤ —á–∞—Ç\n'
                                            '/bot_give_me_blacklist  - –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —á–∞—Ç\n'
                                            '/bot_clear_blacklist  - –æ—á–∏—â–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n'
                                            '/bot_send_message <—Ç–µ–∫—Å—Ç> - —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞\n'
                                            '/append_user_to_blacklicst - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n'
                                            '/delete_status_sell <hash code –∏–ª–∏ —Ç–µ–ª> - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "SOLD" –≤ –ë–î\n'
                                            '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79115553322\n'
                                            '/bot_give_me_number_sold - –≤—ã–¥–∞–µ—Ç –∫–æ–¥—ã –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤ —Ñ–∞–π–ª–µ\n'
                                            '/give_me_qrcode <—Å—É–º–º–∞> - –≤—ã–¥–∞–µ—Ç qrcode –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π –∫ —ç—Ç–æ–π —Å—É–º–º–µ +-50')
    await UserState.enter.set()


async def bot_give_me_number_sold(message: types.Message):
    data = session.query(Teboil.code).filter_by(status_sell='SOLD').all()
    await bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏...')
    strin = StringIO()
    for i in data:
        st = i[0]
        strin.write(st + '\n')
    await bot.send_document(message.chat.id, ('sold_karts.txt', StringIO(strin.getvalue())))
    await UserState.enter.set()


async def give_me_qrcode(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏, –∏—â—É –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç—É...")
    mes = message.text.split()
    if len(mes) != 2:
        await bot.send_message(message.chat.id, "–ù–µ –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞—Ç—å, –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É")
        await UserState.enter.set()
    else:
        balance = mes[1]
        dat = session.query(Teboil.balans, Teboil.code).filter_by(status_sell=None).all()
        for balans, code in dat:
            if int(balance) - 50 < balans < int(balance) + 50:
                num_kart = session.query(Teboil.num_kart).filter_by(code=code).first()
                img_kart = await create_qr_after_update(num_kart[0], balans)
                await bot.send_message(message.chat.id, '–ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞')
                await bot.send_message(message.chat.id, 'üëâ–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è QR...\n')
                await bot.send_photo(message.chat.id, photo=img_kart)
                await bot.send_message(message.chat.id, f'üü© –ë–∞–ª–ª—ã –Ω–∞ –∫–∞—Ä—Ç–µ - {balans}\n')
                await bot.send_message(message.chat.id, f'–ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–Ω–∏–º–∏ —Å –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç—É - {code}')
                user_name = message.from_user.username
                logging.info(f'–í—ã–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∞–¥–º–∏–Ω—É - {code}, –±–∞–ª–∞–Ω—Å - {balans}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user_name}\n')
                session.query(Teboil).filter_by(code=code).update({'status_sell': 'SOLD',
                                                                   'balans': balans,})
                session.commit()
                break


